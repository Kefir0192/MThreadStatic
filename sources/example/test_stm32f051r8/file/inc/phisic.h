#ifndef PHISIC_H_INCLUDED
#define PHISIC_H_INCLUDED

/*
================================================================//
=================           UART            ====================//
================================================================//
*/
//
// ModBusRTU Slave
//////////////////////////////////////////////////////////////////
void ModBusRTU_Slave_UART_Init(void);							// Инициализация UART
void ModBusRTU_Slave_Enable_Inter_Trans_Phisic(void);           // Разрешить прерывание по окончанию передачи
void ModBusRTU_Slave_Disable_Inter_Trans_Phisic(void);          // Запретить прерывание по окончанию передачи
void ModBusRTU_Slave_Enable_Inter_Receiv_Phisic(void);          // Разрешить прерывание по приему байта
void ModBusRTU_Slave_Disable_Inter_Receiv_Phisic(void);         // Запретить прерывание по приему байта
void ModBusRTU_Slave_UART_Write_Phisic(uint8_t Data);           // Передача байта

/*
================================================================//
=================           PORT            ====================//
================================================================//
*/

//
// ModBusRTU Slave линия RTS1
// Ножка управления направлением передачи информации через RS485
//////////////////////////////////////////////////////////////////
#define PORT_MODBUSRTU_SLAVE_RTS1_TX		 // H
#define PORT_MODBUSRTU_SLAVE_RTS1_RX		 // L

// All Port
void Port_Init(void);                                           // Инициализация портов
/*
================================================================//
=================           TIMER           ====================//
================================================================//
*/

//
// ModBusRTU Slave
//////////////////////////////////////////////////////////////////
void ModBusRTU_Slave_Timer_Init(void);                          // Инициализация Таймера
void ModBusRTU_Slave_Timer_Start(void);                         // Запустить таймер
void ModBusRTU_Slave_Timer_Stop(void);                          // Стоп таймер

/*
================================================================//
=================        SPI_Slave_ap       ====================//
================================================================//
*/

/*
 *  Таблица 339 – Формат регистра CR0
    (15…8  SCR) Скорость последовательного обмена.
    Значение поля SCR используется при формировании тактового
    сигнала обмена данными. Информационная скорость
    удовлетворяет соотношению: F_SSPCLK / (CPSDVR * (1 + SCR)),
    где CPSDVR – четное число в диапазоне от 2 до 254 (см. регистр SSPCPSR), а SCR – число от 0 до 255
*/

void SPI_Slave_Init(void);
void SPI_Master_Init(void);

#endif // PHISIC_H_INCLUDED
